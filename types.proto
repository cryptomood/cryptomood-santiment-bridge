// Read https://developers.google.com/protocol-buffers/docs/style

syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

/**
Base model for messages or news, contains basic data like title, content, source, published date etc..
*/
message BaseModel {

    // unique identifier with schema
    string id = 1;

    // title of article
    string title = 2;

    // full content stripped of unnecessary characters(js, html tags...)
    string content = 3;

    //
    string crawler = 4;

    // timestamp representing the datetime, when the article has been published
    google.protobuf.Timestamp pub_date = 5;

    // timestamp representing acquisition datetime
    google.protobuf.Timestamp created = 6;

    // url of article
    string source = 7;

    // summary provided by the domain
    string excerpt = 8;

    // list of video sources
    repeated string videos = 9;

    // list of image sources
    repeated string images = 10;

    // list of off-page hyperlinks
    repeated string links = 11;

    // author of article
    string author = 12;

    // identified language
    string lang = 13;

    // importance of the article's creator
    double weight = 14;
}

/**
Group data that refers to sentiment of message
*/
message SentimentModel {
    // analyzed sentiment <-10, 10>
    double sentiment = 1;

    // analyzed impact in the respective area
    double market_impact = 2;
}

message CryptopanicEntrySource {
    string title = 1;
    string region = 2;
    string domain = 3;
    string path = 4;
}

message CryptopanicEntryVotes {
    int32 negative = 1;
    int32 positive = 2;
    int32 important = 3;
    int32 liked = 4;
    int32 disliked = 5;
    int32 lol = 6;
    int32 toxic = 7;
    int32 saved = 8;
}

message CryptopanicEntryMetadata {
    string message = 1;
    string description = 2;
}

message CryptopanicRawEntry {
    string kind = 1;
    string domain = 2;
    CryptopanicEntrySource source = 3;
    string title = 4;
    string published_at = 5;
    string slug = 6;
    int32 id = 7;
    string url = 8;
    string created_at = 9;
    CryptopanicEntryVotes votes = 10;
    CryptopanicEntryMetadata metadata = 11;
}

message CryptopanicFeed {
    int32 count = 1;
    repeated CryptopanicRawEntry results = 2;
}

message CryptopanicPost {
    CryptopanicRawEntry cryptopanic_raw_entry = 1;
    Article article = 2;
}

/**
Types of named entities
*/
enum NamedEntity {
    ASSET_ENTITY = 0;
    PERSON_ENTITY = 1;
    LOCATION_ENTITY = 2;
    COMPANY_ENTITY = 3;
    EXCHANGE_ENTITY = 4;
    MISC_ENTITY = 5;
    ORGANIZATION_ENTITY = 6;
}

/**
Occurrence od named entity.
contains position, matched text, category
*/
message NamedEntityOccurrence {
    // Represents NamedEntity element
    NamedEntity label = 1;

    // Start position of occurrence
    uint32 start = 2;

    // End position of occurrence
    uint32 end = 3;

    // Matched text
    string text = 4;
}

/**
Groups all types of named entities we support.
*/
message NamedEntitiesModel {
    // list of crypto assets
    repeated string symbols = 1;

    // recognized cryptocurrencies
    repeated NamedEntityOccurrence assets = 2;

    // recognized persons
    repeated NamedEntityOccurrence persons = 3;

    // recognized companies
    repeated NamedEntityOccurrence companies = 4;

    // recognized organizations
    repeated NamedEntityOccurrence organizations = 5;

    // recognized locations
    repeated NamedEntityOccurrence locations = 6;

    // recognized exchanges
    repeated NamedEntityOccurrence exchanges = 7;

    // recognized misc objects
    repeated NamedEntityOccurrence misc = 8;

    // list of assigned tags
    repeated string tags = 9;

    // mapped asset to its mention count
    map<string, int32> asset_mentions = 10;

    // cleaned text which uses NER
    string source_text = 11;
}

/**
Basic model for News, articles.
It's weight depends on Alexa ranks
*/
message Article {
    BaseModel base = 1;
    SentimentModel sentiment = 2;

    // named entities from content
    NamedEntitiesModel named_entities = 3;

    // named entities from title
    NamedEntitiesModel title_data = 4;
}

/**
Basic model for media where the messages are wrote by regular user
*/
message UserMessage {
    BaseModel base = 1;
    SentimentModel sentiment = 2;
    NamedEntitiesModel named_entities = 3;

    // nickname of user
    string user = 4;

    // text of message
    string message = 5;
}

/**
User message from bitmex
*/
message BitmexUserMessage {
    UserMessage user_message = 1;
}

/**
Message from telegram channel
Weight is calculated from number of members in channel
*/
message TelegramUserMessage {
    UserMessage user_message = 1;

    // symbols loaded from db
    repeated string symbols_backup = 2;

    // telegram channel ID
    int32 channel_id = 3;

    // telegram channel members
    int32 channel_subscriber_count = 4;

    // telegram message ID
    int64 message_id = 5;
}

/**
Message from discord chats
*/
message DiscordUserMessage {
    UserMessage user_message = 1;

    // unique ID of discord channel
    string channel_id = 2;

    string guild_id = 3;
}

/**
Stores time/count snapshot of Reddit post comment count
this is mainly for measuring amount of added comments during period of time
*/
message CommentCountTimeSnapshot {
    google.protobuf.Timestamp time = 1;
    int32 comment_count = 2;
}

/**
Reddit comment
*/
message Comment {
    string ID = 1;
    string name = 2;
    string permalink = 3;
    uint64 createdUTC = 4;
    bool deleted = 5;
    int32 ups = 14;
    int32 downs = 15;
    bool likes = 16;
    string body = 6;
    string subreddit = 7;
    repeated Comment replies = 8;
}

/**
Stores useful data from original reddit post
*/
message RedditPostModel {
    string ID = 1;
    uint64 createdUTC = 2;
    string title = 3;
    string URL = 4;
    string author = 5;
    string self_text = 6;
    string name = 11;
    string permalink = 12;
    bool deleted = 13;
    int32 ups = 14;
    int32 downs = 15;
    bool likes = 16;
    int32 num_comments = 17;
    int32 score = 18;

    //list of comments
    repeated Comment replies = 19;
    string domain = 20;

    // unique ID of subreddit
    string SubredditID = 21;
    bool hidden = 22;
    bool locked = 23;
    string thumbnail = 24;
    int32 gilded = 25;
    string distinguished = 26;
    bool stickied = 27;
    bool is_reddit_media_domain = 28;

    // time/count snapshot of Reddit post comment count
    repeated CommentCountTimeSnapshot comment_count_snapshot = 7;

    // Reddit post actual hot rate in queue
    double hot_rate = 8;

    // Reference to parent subreddit
    string subreddit = 9;

    bool is_self = 10;
    bool nsfw = 29;
}

/**
TODO
*/
message RedditPost {
    BaseModel base = 1;
    SentimentModel sentiment = 2;

    // named entities from content
    NamedEntitiesModel named_entities = 3;

    // named entities from title
    NamedEntitiesModel title_data = 4;

    // data from original reddit post
    RedditPostModel reddit_post = 5;
}

/**
Stores some useful data form original tweet
*/
message ExtendedTweet {
    int32 favourite_count = 1;
    string filter_level = 2;
    string id_str = 3;
    string in_reply_to_screen_name = 4;
    string in_reply_to_status_id_str = 5;
    string in_reply_to_user_id_str = 6;
    string is_quote_status = 7;
    string lang = 8;
    bool possibly_sensitive = 9;
    int32 quote_count = 10;
    int32 reply_count = 11;
    int32 retweet_count = 12;
    repeated string user_mentions = 13;
    string source = 14;
    string author_created_at = 15;
    bool author_default_profile = 16;
    bool author_default_profile_image = 17;
    int32 author_followers_count = 18;
    int32 author_friends_count = 19;
    string author_id_str = 20;
    string author_lang = 21;
    string author_location = 22;
    string author_name = 23;
    string author_screen_name = 24;
    string author_profile_image_url_http = 25;
    int32 author_statuses_count = 26;
    repeated string categories = 27;
    bool truncated = 28;
    string full_text = 29;
}

/**
TODO
*/
message Tweet {
    BaseModel base = 1;
    SentimentModel sentiment = 2;
    NamedEntitiesModel named_entities = 3;

    // data from original tweet
    ExtendedTweet extended_tweet = 4;
}


message TimelineData {
    string time = 1;
    string formatted_time = 2;
    repeated int32 value = 3;
    repeated string formatted_value = 4;
    int32 keywords_total_value = 5;
}

message GoogleTrendsUpdate {
    BaseModel base = 1;
    SentimentModel sentiment = 2;
    NamedEntitiesModel named_entities = 3;

    repeated TimelineData timeline_data = 4;
}
// VIDEO
message ChannelLocalization {
    string description = 1;
    string title = 2;
    repeated string force_send_fields = 3;
    repeated string null_fields = 4;
}
message Thumbnail {
    int64 height = 1;
    string url = 2;
    int64 width = 3;
    repeated string force_send_fields = 4;
    repeated string null_fields = 5;
}
message ThumbnailDetails {
    Thumbnail default = 1;
    Thumbnail high = 2;
    Thumbnail maxres = 3;
    Thumbnail medium = 4;
    Thumbnail standard = 5;
    repeated string force_send_fields = 6;
    repeated string null_fields = 7;
}
message ChannelSnippet {
    string country = 1;
    string custom_url = 2;
    string default_language = 3;
    string description = 4;
    ChannelLocalization localized = 5;
    string published_at = 6;
    ThumbnailDetails thumbnails = 7;
    string title = 8;
    repeated string force_send_fields = 9;
    repeated string null_fields = 10;
}
message ChannelStatistics {
    uint64 comment_count = 1;
    bool hidden_subscriber_count = 2;
    uint64 subscriber_count = 3;
    uint64 video_count = 4;
    uint64 view_count = 5;
    repeated string force_send_fields = 9;
    repeated string null_fields = 10;
}
message VideoStatistics {
    uint64 comment_count = 1;
    uint64 dislike_count = 2;
    uint64 favorite_count = 3;
    uint64 like_count = 4;
    uint64 view_count = 5;
    repeated string force_send_fields = 9;
    repeated string null_fields = 10;
}
message Video {
    repeated google.protobuf.Timestamp mentions = 1;
    float trend = 2;
    ChannelSnippet channel = 3;
    ChannelStatistics channel_statistics = 4;
    VideoStatistics statistics = 5;
    BaseModel base = 6;
    SentimentModel sentiment = 7;
    NamedEntitiesModel named_entities = 8;
}

service NamedEntities {
    rpc GetNamedEntities (BaseModel) returns (NamedEntitiesModel) {
    }
}

/**
Service for entries streaming
*/
service MessagesProxy {
    rpc SubscribeArticle (AssetsFilter) returns (stream Article) {
    }
    rpc SubscribeTweet (AssetsFilter) returns (stream Tweet) {
    }
    rpc SubscribeReddit (AssetsFilter) returns (stream RedditPost) {
    }
    rpc SubscribeDiscord (AssetsFilter) returns (stream DiscordUserMessage) {
    }
    rpc SubscribeTelegram (AssetsFilter) returns (stream TelegramUserMessage) {
    }
    rpc SubscribeBitmex (AssetsFilter) returns (stream BitmexUserMessage) {
    }
    rpc SubscribeTransaction (AssetsFilter) returns (stream Transaction){
    }
    rpc SubscribeVideo (AssetsFilter) returns (stream Video){
    }
}

message AssetsFilter {
    // name of the asset - ie. BTC
    repeated string assets = 4;
    bool all_assets = 5;
}

message AggregationCandleFilter {
    // resolution for candle - M1/H1
    string resolution = 1;
    AssetsFilter assets_filter = 2;
}

/**
Each request for historic data should be limited by date
*/
message SentimentHistoricRequest {
    // unix timestamp for start - included in results (greater or equal)
    google.protobuf.Timestamp from = 1;
    // unix timestamp for end - excluded from results (
    google.protobuf.Timestamp to = 2;
    // resolution for candle - M1/H1
    string resolution = 3;
    // name of the asset - ie. BTC
    string asset = 4;}

/**
Each request for historic data should be limited by date
*/
message HistoricRequest {
    // unix timestamp for start - included in results (greater or equal)
    google.protobuf.Timestamp from = 1;
    // unix timestamp for end - excluded from results (
    google.protobuf.Timestamp to = 2;
    AssetsFilter filter = 4;
}

// represent one asset
message Asset {
    // symbol
    string symbol = 2;
}

message AssetItems {
    repeated Asset assets = 1;
}

/**
Service for requesting data from dataset
*/
service Dataset {
    rpc Assets (google.protobuf.Empty) returns (AssetItems) {
    }
}

/**
Service for requesting historic data
*/
service HistoricData {
    rpc HistoricTweets (HistoricRequest) returns (stream Tweet) {
    }
    rpc HistoricArticles (HistoricRequest) returns (stream Article) {
    }
    rpc HistoricRedditPosts (HistoricRequest) returns (stream RedditPost) {
    }
    rpc HistoricTransactions (HistoricRequest) returns (stream Transaction) {
    }
    rpc HistoricVideos (HistoricRequest) returns (stream Video){
    }
}

service Sentiments {
    rpc HistoricSocialSentiment (SentimentHistoricRequest) returns (stream AggregationCandle) {
    }
    rpc HistoricNewsSentiment (SentimentHistoricRequest) returns (stream AggregationCandle) {
    }
    rpc SubscribeSocialSentiment (AggregationCandleFilter) returns (stream AggregationCandle) {
    }
    rpc SubscribeNewsSentiment (AggregationCandleFilter) returns (stream AggregationCandle) {
    }
}

message Transaction {
    string id = 1;
    string hash = 2;
    string from_address = 3;
    string to_address = 4;
    string from_owner = 5;
    string to_owner = 6;
    google.protobuf.Timestamp time = 7;
    string comment = 8;
    string asset = 9;
    double size = 10;
    double USD_size = 11;
}

message AggId {
    int32 year = 1;
    int32 month = 2;
    int32 day = 3;
    int32 hour = 4;
    int32 minute = 5;
}

message AggregationCandle {
    AggId id = 1;
    string asset = 2;
    string resolution = 3;
    int64 pv = 4;
    int64 nv = 5;
    double ps = 6;
    double ns = 7;
    double a = 8;
}

